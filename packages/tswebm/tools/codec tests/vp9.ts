// This file is temporary so i can figure out how to extract the VP9 codec string

// VP9
// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#vp9
// Thanks a ton to the libvpx project:
// https://github.com/webmproject/libvpx/blob/fcd1f39e569eeb8d9956ab6f44193c55a7337e76/vp9/decoder/vp9_decodeframe.c#L2948

// cccc.PP.LL.DD
// cccc.PP.LL.DD.CC.cp.tc.mc.FF

// cccc > 0x86 (Codec ID)
//   V_VP9 > vp09

// 4:2:0 = 0x55B3 (ChromaSubsamplingHorz) = 1  AND  0x55B4 (ChromaSubsamplingVert) = 1
// 8 Bit =
// PP:
//  01 > 0x55B3 (ChromaSubsamplingHorz) = 1 AND 0x55B4 (ChromaSubsamplingVert)

//#region Reading VP9 profile

function vpx_rb_read_bit(buffer: DataView, offset = 0) {
    const p = offset >> 3;
    const q = 7 - (offset & 0x7);
    if (p < buffer.byteLength) {
        const bit = (buffer.getUint8(p) >> q) & 1;
        return bit;
    } else {
        throw new Error('No data');
    }
}

/**
 * Read bit depth flag which defines if a chunk is 10 or 12 bit.
 *
 * Only exists when profile is more than 2 and if the frame is a keyframe
 */
function read_bit_depth_flag(buffer: DataView, profile: number, offset = 2) {
    if (profile < 2) {
        return 8;
    }
    // Skipping version and high
    offset += 2;
    // Skipping RESERVED_ZERO
    if (profile > 2) offset += 1;
    // Check `show_existing_frame`, return if 1
    const showExistingFrame = vpx_rb_read_bit(buffer, offset);
    if (showExistingFrame > 0) {
        throw new Error('Frame was a reference to another frame, could not read bit-depth flag');
    }
    // After `show_existing_frame`
    offset += 1;

    const frameType = vpx_rb_read_bit(buffer, offset);
    // Check if keyframe
    if (frameType == 0) {
        // Skip `frame_type`, `show_frame` and `error_resilient_mode`
        offset += 3;
        // Skip `SYNC_CODE`
        offset += 24;

        return vpx_rb_read_bit(buffer, offset) ? 12 : 10;
    } else {
        throw new Error('Frame is not a keyframe, could not read bit-depth flag.');
    }
}

function read_profile(buffer: DataView, offset = 2) {
    let profile = vpx_rb_read_bit(buffer, offset);
    profile |= vpx_rb_read_bit(buffer, offset + 1) << 1;

    if (profile > 2) {
        profile += vpx_rb_read_bit(buffer, offset + 2);
    }
    return profile;
}

// Profile 0 (8 bit, 4:2:0)
// const data = new Uint8Array([
//     0x82, 0x49, 0x83, 0x42, 0x40, 0x9f, 0xf0, 0x59, 0xf6, 0x1a, 0x38, 0x24, 0x1c, 0x18, 0x42, 0x1c,
//     0x03, 0x08, 0x7f, 0xd9, 0xff, 0x86, 0xf9, 0xff, 0xe6, 0x7f, 0xed, 0x3e, 0x8f, 0xe0, 0x7f, 0xd8,
//     0x7f, 0x5f, 0xd6, 0x7e, 0xdf, 0x4f, 0xd2, 0xfd, 0x5f, 0xa5, 0xe5, 0x1f, 0x3f, 0xd7, 0x85, 0x93,
//     0xbf, 0xaf, 0xbd, 0x77, 0xb4, 0xf5, 0xdf, 0x03, 0xb0, 0x6a, 0xff, 0x6f, 0xd7, 0x66, 0x7d, 0xf1,
//     0x71, 0x49, 0x1f, 0x5f, 0xf3, 0x9d, 0x6b, 0xf9, 0xce, 0x97, 0xd2, 0xf5, 0x4f, 0xb4, 0xf7, 0x5e,
//     0xeb, 0xa8, 0xfa, 0xbf, 0x5d, 0xec, 0x6e, 0x77, 0xc6, 0xdf, 0xbb, 0xbb, 0x75, 0xf5, 0x7f, 0x51,
//     0x78, 0xf7, 0xee, 0xf1, 0x74, 0xde, 0xc8, 0xf9, 0x7b, 0xf3, 0x7e, 0x5f, 0x87, 0xf9, 0x7e, 0xd1,
//     0xfc, 0xff, 0x8f, 0xe2, 0xfe, 0x6f, 0xc5, 0xf9, 0xff, 0x27, 0xa2, 0xe1, 0xdf, 0x9f, 0xe4, 0xfa,
//     0x5f, 0x8d, 0xf8, 0xfe, 0x37
// ]);
// Profile 1 (8 bit, 4:4:4)
// const data = new Uint8Array([
//     0xa2, 0x49, 0x83, 0x42, 0x40, 0x13, 0xfe, 0x0b, 0x3e, 0xc3, 0x47, 0x04, 0x83, 0x83, 0x09, 0x43,
//     0x80, 0x61, 0x40, 0x7f, 0xd5, 0xff, 0x89, 0xfa, 0x0f, 0xf3, 0x3f, 0xf7, 0x3f, 0x47, 0xf0, 0x3f,
//     0xec, 0x3f, 0xc5, 0xfa, 0xef, 0xd7, 0xea, 0x7d, 0x7f, 0xae, 0xf5, 0xbe, 0x9b, 0x78, 0x7d, 0x58,
//     0x58, 0xdc, 0x5f, 0x03, 0xdd, 0x76, 0x3b, 0xe8, 0xe1, 0xf7, 0xbf, 0x8a, 0x47, 0x62, 0xfe, 0x7f,
//     0x76, 0xfe, 0x2f, 0xec, 0xf9, 0x5f, 0xb7, 0xe6, 0x7e, 0xbf, 0x8b, 0xf8, 0xf8, 0x27, 0xed, 0xf5,
//     0x5f, 0x23, 0xf1, 0xfc, 0x8f, 0xc5, 0xf1, 0xff, 0x0f, 0xc7, 0xf1, 0xbf, 0x9b, 0xe3, 0xfc, 0xaf,
//     0xcd, 0xa3, 0xff, 0x45, 0xf5, 0x2a, 0xc4, 0x7b, 0xaf, 0x6f, 0xbd, 0xfa, 0x8f, 0xcf, 0xe0, 0x7e,
//     0xbb, 0xb7, 0xcc, 0x3e, 0x22, 0xe1, 0xfb, 0xeb, 0x84, 0xcc, 0xf2, 0xe3, 0x3e, 0x0b, 0xf1, 0x7e,
//     0x3f, 0xc3, 0xfe, 0x67, 0xd7, 0x7c, 0x1f, 0x03, 0xf2, 0xff, 0x3f, 0xc9, 0xfc, 0xbf, 0x0f, 0xd1,
//     0xfb, 0x3f, 0xea, 0xf8, 0x9f, 0x9f
// ]);
// Profile 2 (10 bit, 4:2:0)
// const data = new Uint8Array([
//     0x92, 0x49, 0x83, 0x42, 0x50, 0x3b, 0xf8, 0x21, 0xbb, 0x02, 0x1c, 0x12, 0x0e, 0x0c, 0x2c, 0x0c,
//     0x03, 0x2c, 0x7f, 0xfb, 0x6f, 0xf9, 0xaf, 0xf2, 0xbf, 0xfc, 0x7f, 0xe3, 0x7e, 0xaf, 0xa3, 0xf7,
//     0xb0, 0xfa, 0x5f, 0x93, 0xf9, 0x3e, 0x3f, 0xf2, 0x7f, 0x5f, 0xf8, 0x7f, 0xe1, 0xff, 0xbd, 0xff,
//     0x07, 0xf8, 0x3f, 0x17, 0xfb, 0x1f, 0xd7, 0xfe, 0x57, 0xfa, 0x9f, 0xd1, 0xfe, 0x1f, 0xf7, 0xff,
//     0x27, 0x94, 0xff, 0x67, 0xf8, 0x7f, 0xed, 0x7f, 0xa9, 0xfe, 0x1f, 0xfa, 0x7f, 0xe6, 0xff, 0x6f,
//     0xf9, 0x1f, 0xdd, 0xf8, 0x3f, 0xc1, 0xfa, 0x6f, 0xeb, 0xf2, 0x9f, 0xf2, 0x3f, 0xd4, 0xff, 0x03,
//     0xfc, 0x1f, 0xf3, 0x3f, 0x97, 0xfa, 0xfe, 0x9b, 0xf9, 0xbf, 0xab, 0xfc, 0xbf, 0xae, 0xff, 0x5b,
//     0xbd, 0x1f, 0xc1, 0xf6, 0x37, 0xf9, 0x5f, 0x62, 0x7f, 0xc0, 0x7d, 0xa3, 0xf9, 0x7d, 0x2f, 0x99,
//     0xdf, 0xe7, 0x7f, 0x8b, 0xff, 0x21, 0xfe, 0x1f, 0xfb, 0xbf, 0xec, 0x7d, 0xd0, 0x7a, 0x52, 0x4c,
//     0xce, 0x4f, 0xf0, 0xcd, 0xcb, 0xe3, 0x1f, 0x89, 0xdf, 0xb4, 0xfe, 0x91, 0xf9, 0xfe, 0xa3, 0xc4,
//     0x59, 0xdb, 0xff, 0x8a, 0xdc, 0xbb, 0x13, 0xcc, 0xe6, 0xeb, 0xd2, 0x3e, 0xa3, 0xf5, 0x4f, 0x63,
//     0xfa, 0x8f, 0xa8, 0xf5, 0x1e, 0xaf, 0xd7, 0x75, 0x1f, 0x69, 0x6f, 0x09, 0xf1, 0x6b, 0xe3, 0x79,
//     0x39, 0xec, 0x7b, 0x04, 0x6c, 0xe2, 0x35, 0xb8, 0x7e, 0xbb, 0xcc, 0xf3, 0xf0, 0xff, 0x27, 0xf8,
//     0x1f, 0xe7, 0x3d, 0x77, 0xb1, 0xfe, 0xca, 0xf5, 0xdf, 0xdd, 0x1e, 0xa3, 0xd7, 0x7a, 0xef, 0xc9,
//     0xf5
// ]);
// Profile 3 (10 bit, 4:4:4)
// const data = new Uint8Array([
//     0xb1, 0x24, 0xc1, 0xa1, 0x28, 0x03, 0xbf, 0x82, 0x1b, 0xb0, 0x21, 0xc1, 0x20, 0xe0, 0xc2, 0xc0,
//     0xc0, 0x43, 0x60, 0x7f, 0xd1, 0xff, 0x35, 0xfe, 0x47, 0xf0, 0xff, 0x91, 0xfa, 0xbe, 0x8f, 0xde,
//     0xc3, 0xe9, 0x7e, 0x5f, 0xe4, 0xfe, 0xff, 0xcf, 0xfc, 0x9f, 0xd7, 0xfe, 0x1f, 0xf8, 0x7f, 0xef,
//     0x7f, 0xc1, 0xff, 0x83, 0xf8, 0xbf, 0xd8, 0xfe, 0xbf, 0xf1, 0xbf, 0xd4, 0xfe, 0x8f, 0xf0, 0xff,
//     0xbf, 0xf9, 0x3c, 0xa7, 0xfb, 0x3f, 0xc3, 0xff, 0x6b, 0xfc, 0xdf, 0xf0, 0xff, 0xd3, 0xff, 0x37,
//     0xfb, 0x7f, 0xc8, 0xfe, 0xef, 0xc1, 0xfe, 0x0f, 0xd3, 0x7f, 0x5f, 0x94, 0xff, 0x91, 0xfe, 0xa7,
//     0xf8, 0x1f, 0xe0, 0xff, 0x99, 0xfc, 0xbf, 0xd7, 0xf4, 0xdf, 0xcd, 0xfd, 0x5f, 0xe5, 0xfd, 0x77,
//     0xfa, 0xdd, 0xe8, 0xfe, 0x0f, 0xb1, 0xbf, 0xca, 0xfb, 0x13, 0xfe, 0x03, 0xed, 0x1f, 0xcb, 0xe9,
//     0x7c, 0xce, 0xff, 0x3b, 0xfc, 0x5f, 0xf9, 0x0f, 0xf0, 0xff, 0xdd, 0xff, 0x63, 0xee, 0x83, 0xd2,
//     0x92, 0x61, 0xff, 0x27, 0xe1, 0xff, 0xcc, 0xfa, 0x5f, 0xc0, 0xfe, 0x37, 0xf6, 0xff, 0xf3, 0xcf,
//     0xf1, 0xbf, 0xc6, 0xfe, 0xfa, 0xf6, 0xff, 0x81, 0xfd, 0x71, 0xfd, 0xa1, 0xe3, 0xaf, 0xf1, 0xbf,
//     0xa2, 0xfd, 0xef, 0x8e, 0xbc, 0x7b, 0xf3, 0xff, 0xd4, 0xdf, 0xc0, 0xff, 0xd0, 0xbd, 0xbf, 0xf2,
//     0x7f, 0xe8, 0xef, 0x51, 0xed, 0x3f, 0xc2, 0x7c, 0xdb, 0xfe, 0xa3, 0xdb, 0xfc, 0x9d, 0xbe, 0x1f,
//     0x48, 0xfa, 0x2e, 0x9d, 0xf2, 0x7b, 0x04, 0x9f, 0xf3, 0x8a, 0x50, 0x14, 0xf8, 0xff, 0xd7, 0xfd,
//     0xff, 0xea, 0xfc, 0x4f, 0xcb, 0xff, 0x31, 0xf9, 0x3f, 0xe8, 0xbf, 0x17, 0xe4, 0xfc, 0x9f, 0xdb,
//     0xf8, 0xbf, 0xd7, 0xfa, 0xfe, 0xf6, 0x7f, 0x2f, 0xe5, 0xff, 0x17, 0xfe, 0x57, 0xfe, 0x7f, 0xf0,
//     0x7f, 0xab, 0xf9, 0x7e, 0x17, 0xfa, 0x7f, 0x66, 0x7f, 0x8d, 0xe6, 0x37, 0xe5, 0xff, 0x8a, 0xfe,
//     0xdf, 0xf8, 0xcf, 0xcb, 0xf0, 0xbf, 0x1f, 0xd9, 0x9f, 0xdf, 0xf5, 0xfe, 0x63, 0xff, 0x95, 0xff,
//     0x0f, 0xf8, 0xff, 0xc1, 0xff, 0x8c, 0xfc, 0x7f
// ]);
// Profile 3 (12 bit, 4:4:4)
// const data = new Uint8Array([
//     0xb1, 0x24, 0xc1, 0xa1, 0x68, 0x03, 0xbf, 0x82, 0x1b, 0xb0, 0x21, 0xc1, 0x20, 0xe0, 0xc2, 0xe0,
//     0xc0, 0x41, 0x40, 0x7f, 0xd1, 0xff, 0x35, 0xfe, 0x57, 0xff, 0x8f, 0xfc, 0x8f, 0xd5, 0xf4, 0x7e,
//     0xf6, 0x1f, 0x4f, 0xf3, 0x7f, 0x27, 0xdd, 0x57, 0xf2, 0x7f, 0x37, 0xf8, 0x7f, 0xe2, 0xff, 0xbd,
//     0xff, 0x07, 0xfe, 0x0f, 0xe2, 0xff, 0x6b, 0xfa, 0xff, 0xca, 0xff, 0x53, 0xfa, 0x3f, 0xc3, 0xfe,
//     0xff, 0xe4, 0xf2, 0x9f, 0xec, 0xff, 0x0f, 0xfd, 0xaf, 0xf5, 0x3f, 0xc3, 0xff, 0x4f, 0xfc, 0xdf,
//     0xed, 0xff, 0x23, 0xfb, 0xbf, 0x07, 0xf8, 0x3f, 0x4d, 0xfd, 0x7e, 0x53, 0xfe, 0x47, 0xfa, 0x9f,
//     0xe0, 0x7f, 0x83, 0xfe, 0x67, 0xf2, 0xff, 0x5f, 0xd3, 0x7f, 0x37, 0xf5, 0x7f, 0x97, 0xf5, 0xdf,
//     0xeb, 0x77, 0xa3, 0xf8, 0x3e, 0xc6, 0xff, 0x2b, 0xec, 0x4f, 0xf8, 0x0f, 0xb4, 0x7f, 0x2f, 0xa5,
//     0xf3, 0x3b, 0xfc, 0xef, 0xf1, 0x7f, 0xe4, 0x3f, 0xc3, 0xff, 0x77, 0xfd, 0x8f, 0xba, 0x0f, 0x4a,
//     0x49, 0xa2, 0xfe, 0xf7, 0xf8, 0x7f, 0xb0, 0x7e, 0xd9, 0xf9, 0x9f, 0xa7, 0x7e, 0xe5, 0xfb, 0x7f,
//     0xb7, 0xf6, 0xff, 0x8d, 0xfd, 0xdd, 0xed, 0xfa, 0x5f, 0xf6, 0x87, 0x45, 0xfe, 0x67, 0xf0, 0xfe,
//     0xeb, 0xc5, 0x7e, 0x40, 0xf9, 0xff, 0xea, 0x6f, 0xe0, 0x7f, 0xe7, 0x9e, 0xdf, 0xf8, 0xdf, 0xf3,
//     0xff, 0x51, 0xed, 0x3f, 0xc0, 0xfc, 0xdc, 0xbe, 0xa3, 0xdb, 0xfc, 0x9d, 0xbe, 0x1f, 0x48, 0xfa,
//     0x2e
// ]);

// VP8, Profile 1 (8 bit, 4:2:0)
// Doesn't work
const data = new Uint8Array([
    0xd0, 0x31, 0x09, 0x9d, 0x01, 0x2a, 0x00, 0x0a, 0xa0, 0x05, 0x02, 0x07, 0x08, 0x85, 0x85, 0x88,
    0x85, 0x84, 0x88, 0x05, 0x83, 0xb9, 0x2c, 0xe5, 0xc9, 0xcc, 0x7a, 0xd8, 0xd7, 0x5a, 0xff, 0xfe,
    0xda, 0x3a, 0xc2, 0xff, 0xb7, 0xfe, 0x67, 0x11, 0x55, 0x41, 0xfa, 0xbf, 0xa7, 0xfd, 0xfc, 0xe3,
    0x26, 0xb2, 0xfe, 0xe1, 0xff, 0xcb, 0x96, 0xcf, 0x52, 0xed, 0xcf, 0x7b, 0xb7, 0xa6, 0x7a, 0x81,
    0x79, 0x86, 0x7f, 0xc5, 0xdd, 0xc0, 0x80, 0x9e, 0x61, 0x99, 0x91, 0xd1, 0xef, 0xcc, 0x8f, 0xf4,
    0xfe, 0x7c, 0xfc, 0xe7, 0xe8, 0x22, 0xe9, 0x92, 0xb7, 0x4c, 0x7c, 0x1b, 0xff, 0xdf, 0xde, 0x1f,
    0x52, 0x7c, 0x8f, 0xff, 0x4f, 0x4a, 0xfb, 0x7a, 0x7a, 0x53, 0x29, 0x3f, 0x6e, 0xff, 0xdf, 0xcc,
    0x27, 0xff, 0xef, 0x56, 0xdf, 0xc1, 0x3f, 0xf9, 0x2f, 0x16, 0xfe, 0x15, 0xff, 0xbb, 0xff, 0xf7,
    0xfd
]);
const dv = new DataView(data.buffer);
const profile = read_profile(dv, 2);
console.log(profile, read_bit_depth_flag(dv, profile));

//#endregion Reading VP9 profile

//#region Read level
const vp9_levels = {
    LEVEL_1: {
        maxLumaSampleRate: 829440,
        maxLumaPicSize: 36864,
        maxWidthAndHeight: 512,
        maxBitrate: 200,
        maxCPBsize: 400,
        minCompressionRatio: 2,
        maxTiles: 1,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_1_1: {
        maxLumaSampleRate: 2764800,
        maxLumaPicSize: 73728,
        maxWidthAndHeight: 768,
        maxBitrate: 800,
        maxCPBsize: 1000,
        minCompressionRatio: 2,
        maxTiles: 1,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_2: {
        maxLumaSampleRate: 4608000,
        maxLumaPicSize: 122880,
        maxWidthAndHeight: 960,
        maxBitrate: 1800,
        maxCPBsize: 1500,
        minCompressionRatio: 2,
        maxTiles: 1,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_2_1: {
        maxLumaSampleRate: 9216000,
        maxLumaPicSize: 245760,
        maxWidthAndHeight: 1344,
        maxBitrate: 3600,
        maxCPBsize: 2800,
        minCompressionRatio: 2,
        maxTiles: 2,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_3: {
        maxLumaSampleRate: 20736000,
        maxLumaPicSize: 552960,
        maxWidthAndHeight: 2048,
        maxBitrate: 7200,
        maxCPBsize: 6000,
        minCompressionRatio: 2,
        maxTiles: 4,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_3_1: {
        maxLumaSampleRate: 36864000,
        maxLumaPicSize: 983040,
        maxWidthAndHeight: 2752,
        maxBitrate: 12000,
        maxCPBsize: 10000,
        minCompressionRatio: 2,
        maxTiles: 4,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_4: {
        maxLumaSampleRate: 83558400,
        maxLumaPicSize: 2228224,
        maxWidthAndHeight: 4160,
        maxBitrate: 18000,
        maxCPBsize: 16000,
        minCompressionRatio: 4,
        maxTiles: 4,
        minAltRefDist: 4,
        maxRefFrames: 8
    },
    LEVEL_4_1: {
        maxLumaSampleRate: 160432128,
        maxLumaPicSize: 2228224,
        maxWidthAndHeight: 4160,
        maxBitrate: 30000,
        maxCPBsize: 18000,
        minCompressionRatio: 4,
        maxTiles: 4,
        minAltRefDist: 5,
        maxRefFrames: 6
    },
    LEVEL_5: {
        maxLumaSampleRate: 311951360,
        maxLumaPicSize: 8912896,
        maxWidthAndHeight: 8384,
        maxBitrate: 60000,
        maxCPBsize: 36000,
        minCompressionRatio: 6,
        maxTiles: 8,
        minAltRefDist: 6,
        maxRefFrames: 4
    },
    LEVEL_5_1: {
        maxLumaSampleRate: 588251136,
        maxLumaPicSize: 8912896,
        maxWidthAndHeight: 8384,
        maxBitrate: 120000,
        maxCPBsize: 46000,
        minCompressionRatio: 8,
        maxTiles: 8,
        minAltRefDist: 10,
        maxRefFrames: 4
    },
    // TODO(huisu): update max_cpb_size for level 5_2 ~ 6_2 when
    // they are finalized (currently tentative).
    LEVEL_5_2: {
        maxLumaSampleRate: 1176502272,
        maxLumaPicSize: 8912896,
        maxWidthAndHeight: 8384,
        maxBitrate: 180000,
        maxCPBsize: 90000,
        minCompressionRatio: 8,
        maxTiles: 8,
        minAltRefDist: 10,
        maxRefFrames: 4
    },
    LEVEL_6: {
        maxLumaSampleRate: 1176502272,
        maxLumaPicSize: 35651584,
        maxWidthAndHeight: 16832,
        maxBitrate: 180000,
        maxCPBsize: 90000,
        minCompressionRatio: 8,
        maxTiles: 16,
        minAltRefDist: 10,
        maxRefFrames: 4
    },
    LEVEL_6_1: {
        maxLumaSampleRate: 2353004544,
        maxLumaPicSize: 35651584,
        maxWidthAndHeight: 16832,
        maxBitrate: 240000,
        maxCPBsize: 180000,
        minCompressionRatio: 8,
        maxTiles: 16,
        minAltRefDist: 10,
        maxRefFrames: 4
    },
    LEVEL_6_2: {
        maxLumaSampleRate: 4706009088,
        maxLumaPicSize: 35651584,
        maxWidthAndHeight: 16832,
        maxBitrate: 480000,
        maxCPBsize: 360000,
        minCompressionRatio: 8,
        maxTiles: 16,
        minAltRefDist: 10,
        maxRefFrames: 4
    }
};
